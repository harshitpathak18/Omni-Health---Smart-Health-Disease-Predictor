# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aMq779cS0zb6n1xmTJCN0dtDe_TWB4AE
"""

# importing libraries
import pickle
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier

# loading the csv data to a Pandas DataFrame
heart_data = pd.read_csv('/content/heart.csv')

# print first 5 rows of the dataset
heart_data.head()

# number of rows and columns in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of Target Variable
heart_data['target'].value_counts()

"""1 --> Defective Heart

0 --> Healthy Heart
"""

plt.figure(figsize=(15,10))
sns.heatmap(heart_data.corr(), annot=True, cmap='Greens')
plt.show()

"""Splitting the Features and Target"""

X = heart_data.drop(columns=['target','fbs','restecg','oldpeak','ca'], axis=1)
Y = heart_data['target']

"""Splitting the Data into Training data & Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training"""

from sklearn.pipeline import Pipeline
# Create the pipeline with feature scaling and RandomForestClassifier
pipeline = Pipeline([
    ('classifier', RandomForestClassifier())
])

# Fit the model
pipeline.fit(X_train, Y_train)

"""Model Evaluation"""

# accuracy on training data
X_train_prediction = pipeline.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)


# accuracy on test data
X_test_prediction = pipeline.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

# Saving model
pickle.dump(pipeline, open('Heart_Diseases_pipeline.pkl','wb'))

"""Building a Predictive System"""

input_data = (56,   0,   0, 134, 409, 150,   1,   1,   3) # Not Heart Diseases (age	sex	cp	trestbps	chol	thalach exang	slope thal)
# input_data = (51,   1,   3, 125, 213, 125,   1,   2,   2)  # Heart Diseases

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# model = pickle.load(open('Heart_Diseases_pipeline.pkl','rb'))
prediction = pipeline.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

